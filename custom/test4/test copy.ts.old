interface HtmlElementState {
    tag: string;
    label: null | string;
    attrs: Record<string, string>;
    events: Record<string, () => void>;
    styles: Record<string, string>;
    children: Array<HtmlElementState | HtmlElementTextState>;
}

interface HtmlElementTextState {
    type: 'text';
    value: string;
}

const TYPES = {
    element: 0,
    text: 1,
    label: 2,
    attr: 3,
    style: 4,
    event: 5,
};

const TAG_ARRAY: string[] = [];
const TAG: Record<string, number> = {};
const ATTR_ARRAY: string[] = [];
const ATTR: Record<string, number> = {};
const TEXTS_ARRAY: string[] = [];
const TEXTS: Record<string, number> = {};
const LABEL_ARRAY: string[] = [];
const LABEL: Record<string, number> = {};
const STYLE_ARRAY: string[] = [];
const STYLES: Record<string, number> = {};
const EVENT_ARRAY: string[] = [];
const EVENTS: Record<string, number> = {};

const text = (value: string, ...args: Uint32Array[]): Uint32Array => {
    let valueIndex = TEXTS[value];
    if (valueIndex === undefined) {
        valueIndex = TEXTS_ARRAY.length;
        TEXTS_ARRAY.push(value);
        TEXTS[value] = valueIndex;
    }
    return new Uint32Array([TYPES.text, valueIndex]);
};
const label = (label: string): Uint32Array => {
    let labelIndex = LABEL[label];
    if (labelIndex === undefined) {
        labelIndex = LABEL_ARRAY.length;
        LABEL_ARRAY.push(label);
        LABEL[label] = labelIndex;
    }
    return new Uint32Array([TYPES.label, labelIndex]);
};

const textObj = (value: string): HtmlElementTextState => {
    return { type: 'text', value };
};

const attr = (name: string, value: string): Uint32Array => {
    let nameIndex = ATTR[name];
    if (nameIndex === undefined) {
        nameIndex = ATTR_ARRAY.length;
        ATTR_ARRAY.push(name);
        ATTR[name] = nameIndex;
    }
    let valueIndex = ATTR[value];
    if (valueIndex === undefined) {
        valueIndex = ATTR_ARRAY.length;
        ATTR_ARRAY.push(value);
        ATTR[value] = valueIndex;
    }
    return new Uint32Array([TYPES.attr, nameIndex, valueIndex]);
};

const attrObj = (name: string, value: string): Record<string, string> => {
    const attrs: Record<string, string> = {};
    attrs[name] = value;
    return attrs;
};

const style = (name: string, value: string): Uint32Array => {
    let nameIndex = STYLES[name];
    if (nameIndex === undefined) {
        nameIndex = STYLE_ARRAY.length;
        STYLE_ARRAY.push(name);
        STYLES[name] = nameIndex;
    }
    let valueIndex = STYLES[value];
    if (valueIndex === undefined) {
        valueIndex = STYLE_ARRAY.length;
        STYLE_ARRAY.push(value);
        STYLES[value] = valueIndex;
    }
    return new Uint32Array([TYPES.style, nameIndex, valueIndex]);
};

const styleObj = (name: string, value: string): Record<string, string> => {
    const styles: Record<string, string> = {};
    styles[name] = value;
    return styles;
};

const on = (name: string, value: Function): Uint32Array => {
    let nameIndex = EVENTS[name];
    if (nameIndex === undefined) {
        nameIndex = EVENT_ARRAY.length;
        EVENT_ARRAY.push(name);
        EVENTS[name] = nameIndex;
    }
    let valueIndex = EVENTS[value.toString()];
    if (valueIndex === undefined) {
        valueIndex = EVENT_ARRAY.length;
        EVENT_ARRAY.push(value.toString());
        EVENTS[value.toString()] = valueIndex;
    }
    return new Uint32Array([TYPES.event, nameIndex, valueIndex]);
};

const onObj = (name: string, value: () => void): Record<string, () => void> => {
    const events: Record<string, () => void> = {};
    events[name] = value;
    return events;
};

const element = (tag: string, ...args: Uint32Array[]): Uint32Array => {
    let tagIndex = TAG[tag];
    if (tagIndex === undefined) {
        tagIndex = TAG_ARRAY.length;
        TAG_ARRAY.push(tag);
        TAG[tag] = tagIndex;
    }

    let totalLength = 2;
    for (let i = 0; i < args.length; i++) {
        totalLength += args[i].length;
    }

    let combinedArray = new Uint32Array(totalLength);
    combinedArray[0] = TYPES.element;
    combinedArray[1] = tagIndex;

    let offset = 2;
    for (let i = 0; i < args.length; i++) {
        combinedArray.set(args[i], offset);
        offset += args[i].length;
    }

    return combinedArray;
};

const elementObj = (
    tag: string,
    ...args: Array<HtmlElementState | HtmlElementTextState | Record<string, string> | Record<string, () => void> | null>
): HtmlElementState => {
    const attrs: Record<string, string> = {};
    const events: Record<string, () => void> = {};
    const styles: Record<string, string> = {};
    let label: string | null = null;
    const children: Array<HtmlElementState | HtmlElementTextState> = [];

    for (const arg of args) {
        if (arg === null) {
            continue;
        } else if ((arg as HtmlElementTextState).type === 'text') {
            children.push(arg as HtmlElementTextState);
        } else if ((arg as HtmlElementState).tag) {
            children.push(arg as HtmlElementState);
        } else {
            const record = arg as Record<string, any>;
            for (const key in record) {
                if (record[key] instanceof Function) {
                    events[key] = record[key];
                } else {
                    if (key === "label") {
                        label = record[key];
                    } else {
                        attrs[key] = record[key];
                    }
                }
            }
        }
    }

    return { tag, label, attrs, styles, events, children };
};

const runTest = (testFunction: () => void, iterations: number): number => {
    const start = performance.now();
    for (let i = 0; i < iterations; i++) {
        testFunction();
    }
    const end = performance.now();
    return end - start;
};

const testUint32Array = () => {
    element(
        "div",
        label("container"),
        attr("id", "mainContainer"),
        style("display", "flex"),
        style("flexDirection", "column"),
        on("mouseover", () => console.log("Mouse over main container")),
        element(
            "header",
            label("header"),
            attr("class", "headerClass"),
            style("backgroundColor", "blue"),
            element("h1", text("Welcome to the Page")),
            element(
                "nav",
                label("navigation"),
                attr("class", "navClass"),
                element("ul",
                    element("li", text("Home")),
                    element("li", text("About")),
                    element("li", text("Contact"))
                )
            )
        ),
        element(
            "main",
            label("content"),
            attr("class", "contentClass"),
            style("flex", "1"),
            element("section",
                label("section1"),
                element("h2", text("Section 1")),
                element("p", text("This is the first section."))
            ),
            element("section",
                label("section2"),
                element("h2", text("Section 2")),
                element("p", text("This is the second section."))
            )
        ),
        element(
            "footer",
            label("footer"),
            attr("class", "footerClass"),
            style("backgroundColor", "grey"),
            text("Footer content goes here")
        )
    );
};

const testObjects = () => {
    elementObj(
        "div",
        { label: "container" },
        attrObj("id", "mainContainer"),
        styleObj("display", "flex"),
        styleObj("flexDirection", "column"),
        onObj("mouseover", () => console.log("Mouse over main container")),
        elementObj(
            "header",
            { label: "header" },
            attrObj("class", "headerClass"),
            styleObj("backgroundColor", "blue"),
            elementObj("h1", textObj("Welcome to the Page")),
            elementObj(
                "nav",
                { label: "navigation" },
                attrObj("class", "navClass"),
                elementObj("ul",
                    elementObj("li", textObj("Home")),
                    elementObj("li", textObj("About")),
                    elementObj("li", textObj("Contact"))
                )
            )
        ),
        elementObj(
            "main",
            { label: "content" },
            attrObj("class", "contentClass"),
            styleObj("flex", "1"),
            elementObj("section",
                { label: "section1" },
                elementObj("h2", textObj("Section 1")),
                elementObj("p", textObj("This is the first section."))
            ),
            elementObj("section",
                { label: "section2" },
                elementObj("h2", textObj("Section 2")),
                elementObj("p", textObj("This is the second section."))
            )
        ),
        elementObj(
            "footer",
            { label: "footer" },
            attrObj("class", "footerClass"),
            styleObj("backgroundColor", "grey"),
            textObj("Footer content goes here")
        )
    );
};

document.getElementById("testUint32Array")?.addEventListener("click", () => {
    const iterations = 100000;
    const time = runTest(testUint32Array, iterations);
    document.getElementById("results")!.innerText = `Uint32Array test completed in ${time.toFixed(2)}ms for ${iterations} iterations.`;
});

document.getElementById("testObjects")?.addEventListener("click", () => {
    const iterations = 100000;
    const time = runTest(testObjects, iterations);
    document.getElementById("results")!.innerText = `Object test completed in ${time.toFixed(2)}ms for ${iterations} iterations.`;
});
